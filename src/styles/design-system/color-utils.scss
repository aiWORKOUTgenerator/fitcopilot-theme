// Color utilities for the design system

// Convert hex to RGB components
@function color-to-rgb($hex-color) {
  @return red($hex-color), green($hex-color), blue($hex-color);
}

// Generate alpha variants for a color
@mixin generate-alpha-variants($color-name, $color-value) {
  --#{$color-name}: #{$color-value};
  --#{$color-name}-rgb: #{color-to-rgb($color-value)};
  
  --#{$color-name}-alpha-10: rgba(var(--#{$color-name}-rgb), 0.1);
  --#{$color-name}-alpha-30: rgba(var(--#{$color-name}-rgb), 0.3);
  --#{$color-name}-alpha-50: rgba(var(--#{$color-name}-rgb), 0.5);
  --#{$color-name}-alpha-70: rgba(var(--#{$color-name}-rgb), 0.7);
  --#{$color-name}-alpha-90: rgba(var(--#{$color-name}-rgb), 0.9);
}

// Calculate relative luminance (simplified)
@function luminance($color) {
  $r: red($color) / 255;
  $g: green($color) / 255;
  $b: blue($color) / 255;
  
  $r: if($r <= 0.03928, $r / 12.92, pow(($r + 0.055) / 1.055, 2.4));
  $g: if($g <= 0.03928, $g / 12.92, pow(($g + 0.055) / 1.055, 2.4));
  $b: if($b <= 0.03928, $b / 12.92, pow(($b + 0.055) / 1.055, 2.4));
  
  @return 0.2126 * $r + 0.7152 * $g + 0.0722 * $b;
}

// Check contrast ratio (WCAG)
@function contrast-ratio($color1, $color2) {
  $luminance1: luminance($color1) + 0.05;
  $luminance2: luminance($color2) + 0.05;
  
  @return if($luminance1 > $luminance2, $luminance1 / $luminance2, $luminance2 / $luminance1);
}

// Validate contrast (AA: 4.5:1, AAA: 7:1)
@function meets-wcag-aa($color1, $color2) {
  @return contrast-ratio($color1, $color2) >= 4.5;
}

// Get accessible text color based on background
@function accessible-text-color($background, $light-color, $dark-color) {
  @if contrast-ratio($background, $light-color) >= contrast-ratio($background, $dark-color) {
    @return $light-color;
  } @else {
    @return $dark-color;
  }
} 