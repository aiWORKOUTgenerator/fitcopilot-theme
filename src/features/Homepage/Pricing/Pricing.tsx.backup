import { Check, ChevronDown, ChevronUp, Clock, Crown, Star } from 'lucide-react';
import React, { useEffect, useRef, useState } from 'react';
import Tooltip from '../../../features/shared/Tooltip';
import PricingCTA from './components/PricingCTA';
import './Pricing.scss';
import { PricingProps } from './types';
import { mapPlanToGradient } from './utils/themeUtils';

/**
 * Pricing component - Displays the subscription options with animation and interactive elements
 * Now with theme support following established Homepage patterns
 */
export const Pricing: React.FC<PricingProps> = ({ pricing = [], variant = 'default' }) => {
  const [isYearly, setIsYearly] = useState(true);
  const [animationState, setAnimationState] = useState<'normal' | 'exploding' | 'transitioning' | 'betaPrice'>('normal');
  const [expandedFeatures, setExpandedFeatures] = useState<Record<string, boolean>>({});
  const [showBetaTooltip, setShowBetaTooltip] = useState(false);
  const [showEliteTooltip, setShowEliteTooltip] = useState(false);

  // Animation timeline references
  const timeoutsRef = useRef<number[]>([]);

  // Clear all timeouts on cleanup
  const clearAllTimeouts = () => {
    timeoutsRef.current.forEach(timeoutId => window.clearTimeout(timeoutId));
    timeoutsRef.current = [];
  };

  // Component cleanup
  useEffect(() => {
    return () => {
      clearAllTimeouts();
    };
  }, []);

  // Animation sequence for Pro plan
  useEffect(() => {
    const startAnimation = () => {
      // Step 1: Explosion effect (0.5s)
      setAnimationState('exploding');
      const timeout1 = window.setTimeout(() => {
        // Step 2: Transition out (0.3s)
        setAnimationState('transitioning');
        const timeout2 = window.setTimeout(() => {
          // Step 3: Show beta price (stays)
          setAnimationState('betaPrice');
        }, 300);
        timeoutsRef.current.push(timeout2);
      }, 500);
      timeoutsRef.current.push(timeout1);
    };

    // Start the animation after a short delay
    const initialTimeout = window.setTimeout(startAnimation, 1000);
    timeoutsRef.current.push(initialTimeout);

    return () => {
      clearAllTimeouts();
    };
  }, []);

  const handleCardMouseEnter = (planName: string) => {
    if (planName === 'Pro') {
      setShowBetaTooltip(true);
    } else if (planName === 'Elite') {
      setShowEliteTooltip(true);
    }
  };

  const handleCardMouseLeave = (planName: string) => {
    if (planName === 'Pro') {
      setShowBetaTooltip(false);
    } else if (planName === 'Elite') {
      setShowEliteTooltip(false);
    }
  };

  const _handleProClick = () => {
    // This could trigger registration flow or other actions
    console.log('Pro plan clicked');
  };

  const _handleEliteClick = () => {
    // This could trigger premium registration flow
    console.log('Elite plan clicked');
  };

  const toggleFeatures = (planName: string) => {
    setExpandedFeatures(prev => ({
      ...prev,
      [planName]: !prev[planName]
    }));
  };

  const renderExplosionParticles = () => {
    return Array.from({ length: 8 }).map((_, i) => (
      <div
        key={i}
        className="explosion-particle"
        style={{
          left: `${Math.random() * 100}%`,
          top: `${Math.random() * 100}%`,
          animationDelay: `${Math.random() * 0.5}s`,
          animationDuration: `${Math.random() * 1 + 1}s`
        }}
      />
    ));
  };

  // Updated plans with more comprehensive data structure
  const defaultPlans = pricing.length > 0 ? pricing : [
    {
      id: 1,
      name: 'Basic',
      description: 'Perfect for getting started with AI workouts',
      price: '0',
      period: 'forever',
      features: [
        { id: 1, text: '3 AI workout generations per month', included: true },
        { id: 2, text: 'Basic exercise library', included: true },
        { id: 3, text: 'Progress tracking', included: true },
        { id: 4, text: 'Mobile app access', included: true },
        { id: 5, text: 'Email support', included: true },
        { id: 6, text: 'Custom meal plans', included: false },
        { id: 7, text: 'Advanced analytics', included: false },
        { id: 8, text: 'Priority support', included: false }
      ],
      ctaText: 'Get Started Free',
      ctaLink: 'https://builder.fitcopilot.ai/register?plan=basic',
      accentColors: 'from-blue-300 to-cyan-400',
      titleTextColors: 'from-blue-300 to-cyan-400',
      priceTextColors: 'from-blue-300 to-cyan-400',
      accentTextColor: 'blue-300'
    },
    {
      id: 2,
      name: 'Pro',
      description: 'Advanced features for serious fitness enthusiasts',
      price: isYearly ? '89' : '8.99',
      betaPrice: isYearly ? '59' : '5.99',
      period: isYearly ? 'year' : 'month',
      features: [
        { id: 1, text: 'Unlimited AI workout generations', included: true, isHighlighted: true },
        { id: 2, text: 'Advanced exercise library', included: true },
        { id: 3, text: 'Detailed progress analytics', included: true },
        { id: 4, text: 'Custom nutrition guidance', included: true },
        { id: 5, text: 'Workout plan scheduling', included: true },
        { id: 6, text: 'Priority email support', included: true },
        { id: 7, text: 'Export workout plans', included: true },
        { id: 8, text: 'Integration with fitness apps', included: true, tooltip: 'Connect with MyFitnessPal, Strava, and more' }
      ],
      ctaText: 'Upgrade to Pro',
      ctaLink: 'https://builder.fitcopilot.ai/register?plan=pro',
      popular: true,
      accentColors: 'from-lime-300 to-emerald-400',
      titleTextColors: 'from-lime-300 to-emerald-400',
      priceTextColors: 'from-lime-300 to-emerald-400',
      accentTextColor: 'lime-300',
      badge: 'Most Popular'
    },
    {
      id: 3,
      name: 'Elite',
      description: 'The ultimate fitness experience with personal coaching',
      price: isYearly ? '199' : '19.99',
      period: isYearly ? 'year' : 'month',
      features: [
        { id: 1, text: 'Everything in Pro', included: true, isHighlighted: true },
        { id: 2, text: 'Live coaching sessions', included: true, isHighlighted: true },
        { id: 3, text: 'Advanced AI programming', included: true },
        { id: 4, text: 'Personalized nutrition guidance', included: true },
        { id: 5, text: 'Video form checks & feedback', included: true },
        { id: 6, text: 'Dedicated trainer support', included: true },
        { id: 7, text: 'Customized workout plan design', included: true },
        { id: 8, text: 'Direct trainer email support', included: true, tooltip: 'Get direct access to certified fitness trainers via email' }
      ],
      ctaText: 'Get Elite Access',
      ctaLink: 'https://builder.fitcopilot.ai/register?plan=elite',
      accentColors: 'from-purple-300 to-indigo-400',
      titleTextColors: 'from-lime-300 to-emerald-400',
      priceTextColors: 'from-lime-300 to-emerald-400',
      accentTextColor: 'purple-300',
      badge: 'Premium'
    }
  ];

  // Floating particles in background
  const renderBackgroundParticles = () => {
    return Array.from({ length: 12 }).map((_, i) => (
      <div
        key={i}
        className="price-particle"
        style={{
          left: `${Math.random() * 100}%`,
          top: `${Math.random() * 100}%`,
          width: `${Math.random() * 4 + 2}px`,
          height: `${Math.random() * 4 + 2}px`,
          animationDelay: `${Math.random() * 4}s`,
          animationDuration: `${Math.random() * 8 + 10}s`
        }}
      />
    ));
  };

  return (
    <section 
      className="pricing-section py-24 relative overflow-hidden"
      data-theme={variant !== 'default' ? variant : undefined}
    >
      <div className="absolute inset-0 pricing-background" aria-hidden="true">
        {renderBackgroundParticles()}
      </div>
      
      <div className="container mx-auto px-4 relative z-10">
        <div className="text-center mb-16" data-aos="fade-up">
          <span className="text-xs font-bold tracking-widest uppercase mb-2 block text-purple-300">Subscription Plans</span>
          <h2 className="text-4xl md:text-5xl font-bold mb-4 text-white">Choose Your <span className="text-gradient bg-gradient-to-r from-lime-300 to-green-400">Plan</span></h2>
          <p className="text-gray-300 max-w-2xl mx-auto">
            Flexible options to match your fitness journey
          </p>
          
          <div className="mt-8 inline-flex items-center p-1 bg-gray-800 rounded-full border border-gray-700">
            <button
              className={`px-6 py-2 rounded-full text-sm font-medium transition ${!isYearly ? 'bg-gray-700 text-white' : 'text-gray-400'}`}
              onClick={() => setIsYearly(false)}
              aria-pressed={!isYearly}
            >
              Monthly
            </button>
            <button
              className={`px-6 py-2 rounded-full text-sm font-medium transition flex items-center ${isYearly ? 'bg-gray-700 text-white' : 'text-gray-400'}`}
              onClick={() => setIsYearly(true)}
              aria-pressed={isYearly}
            >
              Yearly <span className="ml-1 text-xs px-2 py-0.5 bg-lime-900/50 text-lime-300 rounded-full">Save 20%</span>
            </button>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {defaultPlans.map((plan, index) => (
            <div
              key={plan.id}
              className={`pricing-card relative rounded-2xl border overflow-hidden flex flex-col ${plan.popular ? 'popular-plan border-lime-500/30 bg-gradient-to-b from-gray-800 to-gray-900' : 'border-gray-700 bg-gray-800/50'}`}
              data-aos="fade-up" 
              data-aos-delay={index * 100}
              onMouseEnter={() => handleCardMouseEnter(plan.name)}
              onMouseLeave={() => handleCardMouseLeave(plan.name)}
            >
              {/* Popular badge */}
              {plan.popular && (
                <div className="absolute top-0 right-0 bg-lime-500/10 px-4 py-1 border-b border-l border-lime-500/30 rounded-bl-xl">
                  <Star className="w-4 h-4 text-lime-300" />
                </div>
              )}
              
              {/* Card header with plan details */}
              <div className="p-6 border-b border-gray-700">
                {/* Badge */}
                {plan.badge && (
                  <div className="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-gray-700/70 text-white mb-4">
                    {plan.name === 'Pro' && <Star className="w-3 h-3 mr-1 text-lime-300" aria-hidden="true" />}
                    {plan.name === 'Elite' && <Crown className="w-3 h-3 mr-1 text-purple-300" aria-hidden="true" />}
                    {plan.badge}
                  </div>
                )}

                {/* Plan name and icon */}
                <div className="flex items-center mb-4">
                  <h3 className={`plan-name-gradient bg-gradient-to-r ${plan.titleTextColors || 'from-white to-white'
                  }`}>{plan.name}</h3>
                </div>

                {/* Plan price */}
                <div className="mb-4">
                  {plan.popular ? (
                    // Animated price for Pro plan
                    <div className="min-h-16 flex items-end" aria-live="polite">
                      {animationState === 'normal' && (
                        <div className="flex items-end">
                          <span className={`price price-gradient bg-gradient-to-r ${plan.priceTextColors || 'from-white to-white'}`}>
                            ${plan.price}
                          </span>
                          <span className="text-white ml-2 mb-1 font-medium">/{plan.period}</span>
                        </div>
                      )}

                      {animationState === 'exploding' && (
                        <div className="relative flex items-end">
                          <span className={`price price-gradient bg-gradient-to-r ${plan.priceTextColors || 'from-white to-white'} price-shake price-flash`}>
                            ${plan.price}
                          </span>
                          <span className="text-white ml-2 mb-1 font-medium">/{plan.period}</span>
                          <div className="absolute inset-0 flex items-center justify-start overflow-visible" aria-hidden="true">
                            {renderExplosionParticles()}
                          </div>
                        </div>
                      )}

                      {animationState === 'transitioning' && (
                        <div className="flex flex-col">
                          <div className="flex items-center">
                            <span className="text-xl text-white line-through mr-2 price-fade-out" aria-label="Regular price:">${plan.price}</span>
                          </div>
                          <div className="h-10"></div> {/* Placeholder space for the beta price to appear */}
                        </div>
                      )}

                      {animationState === 'betaPrice' && (
                        <div className="flex flex-col">
                          <div className="flex items-center">
                            <span className="text-xl text-white line-through mr-2" aria-label="Regular price:">${plan.price}</span>
                            <span className="beta-badge bg-gray-700/50 text-lime-300 text-xs px-2 py-0.5 rounded-full font-semibold border border-lime-300/30 price-fade-in">Beta Offer</span>
                          </div>
                          <div className="flex items-end">
                            <span className={`price price-gradient bg-gradient-to-r ${plan.priceTextColors || 'from-white to-white'} price-zoom-in`} aria-label="Special beta price:">
                              ${plan.betaPrice}
                            </span>
                            <span className="text-white ml-2 mb-1 font-medium price-fade-in">/{plan.period}</span>
                          </div>
                        </div>
                      )}
                    </div>
                  ) : (
                    // Regular price for other plans
                    <div className="flex items-end">
                      <span className={`price price-gradient bg-gradient-to-r ${plan.priceTextColors || 'from-white to-white'}`}>
                        {plan.price === '0' ? 'Free' : `$${plan.price}`}
                      </span>
                      {plan.period !== 'forever' && (
                        <span className="text-white ml-2 mb-1 font-medium">/{plan.period}</span>
                      )}
                    </div>
                  )}
                </div>

                {/* Plan description */}
                <p className="text-gray-400 mb-1">{plan.description}</p>

                {/* Hover hint for Pro and Elite plans */}
                {(plan.name === 'Pro' || plan.name === 'Elite') && (
                  <p className="text-xs text-gray-400 mt-2 italic flex items-center">
                    <span className="inline-block w-2 h-2 bg-gray-400 rounded-full mr-1 animate-pulse"></span>
                    Hover for more details
                  </p>
                )}
              </div>

              {/* Plan features */}
              <div className="p-6 flex-grow flex flex-col">
                <div className="mb-2 flex items-center justify-between">
                  <h4 className="font-semibold text-white">Features</h4>
                  {plan.features.length > 5 && (
                    <button
                      className="p-1 rounded-md text-gray-400 hover:text-white hover:bg-gray-700/50 transition-colors"
                      onClick={() => toggleFeatures(plan.name)}
                      aria-label={expandedFeatures[plan.name] ? "Show fewer features" : "Show all features"}
                      aria-expanded={expandedFeatures[plan.name]}
                    >
                      {expandedFeatures[plan.name] ?
                        <ChevronUp size={20} aria-hidden="true" /> :
                        <ChevronDown size={20} aria-hidden="true" />
                      }
                    </button>
                  )}
                </div>

                <ul className="space-y-3 mb-6 flex-grow">
                  {plan.features
                    .slice(0, expandedFeatures[plan.name] ? plan.features.length : 5)
                    .map(feature => (
                      <li key={feature.id} className="flex items-start">
                        {feature.included ? (
                          <Check className="shrink-0 h-5 w-5 text-lime-400 mr-3 mt-0.5" />
                        ) : (
                          <div className="shrink-0 h-5 w-5 border border-gray-600 rounded mr-3 mt-0.5" />
                        )}
                        <div className="flex-grow flex items-center justify-between">
                          <span className={`${feature.included ? 'text-gray-300' : 'text-gray-500'} ${feature.isHighlighted ? 'font-semibold' : ''}`}>
                            {feature.text}
                          </span>
                          {feature.tooltip && (
                            <Tooltip content={feature.tooltip} position="left">
                              <div className="ml-1 w-4 h-4 flex items-center justify-center">
                                <Clock className="w-3 h-3 text-gray-400" />
                              </div>
                            </Tooltip>
                          )}
                        </div>
                      </li>
                    ))}
                </ul>

                {/* CTA Button */}
                <div className="mt-auto">
                  <PricingCTA
                    text={plan.ctaText}
                    href={plan.ctaLink}
                    planType={plan.name.toLowerCase()}
                    themeVariant={variant}
                    buttonVariant={plan.popular ? 'primary' : 'secondary'}
                    buttonSize="large"
                    gradientClass={mapPlanToGradient(plan.name.toLowerCase())}
                  />
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default Pricing; 